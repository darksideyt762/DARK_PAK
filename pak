import os
import shutil
import subprocess
from pathlib import Path

# Define color codes for terminal output
class Colors:
    NOCOLOR = '\033[0m'
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    ORANGE = '\033[0;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    LIGHTGRAY = '\033[0;37m'
    DARKGRAY = '\033[1;30m'
    LIGHTRED = '\033[1;31m'
    LIGHTGREEN = '\033[1;32m'
    YELLOW = '\033[1;33m'
    LIGHTBLUE = '\033[1;34m'
    LIGHTPURPLE = '\033[1;35m'
    LIGHTCYAN = '\033[1;36m'
    WHITE = '\033[1;37m'

# Print the banner and initial message
print(f"{Colors.LIGHTGREEN}DARKSIDE PAK TOOL{Colors.NOCOLOR}")
print("ðŸŸ©â¬œðŸŸ§ðŸŸ©â¬œðŸŸ§ðŸŸ©â¬œðŸŸ§")

# Define paths
dark_pak_dir = Path("/storage/emulated/0/DARK_PAK/UNPACK_REPACK")
paks_dir = dark_pak_dir / "PAKS"
unpack_repack_dir = Path("/storage/emulated/0/DARK_PAK/UNPACK_REPACK/UNPACK")

# Ensure directories exist
paks_dir.mkdir(parents=True, exist_ok=True)
unpack_repack_dir.mkdir(parents=True, exist_ok=True)

# Define paths for DARKSIDE executable (Termux home path)
executable_script = Path.home() / "DARK_PAK" / "DARKSIDE"

def unpakgamepach1(selected_file):
    """Unpack the selected .pak file and create repack and result folders."""
    pak_name = selected_file.stem  # Get the name of the .pak file without extension
    unpack_dir = unpack_repack_dir / pak_name / "unpack"
    repack_dir = unpack_repack_dir / pak_name / "repack"
    result_dir = unpack_repack_dir / pak_name / "result"

    # Create necessary directories
    unpack_dir.mkdir(parents=True, exist_ok=True)
    repack_dir.mkdir(parents=True, exist_ok=True)
    result_dir.mkdir(parents=True, exist_ok=True)

    print(f"{Colors.CYAN}Unpacking {selected_file.name} to {unpack_dir}...{Colors.NOCOLOR}")
    subprocess.run([str(executable_script), "-a", str(selected_file), str(unpack_dir)])
    print(f"{Colors.GREEN}Unpacking completed! Files are saved in {unpack_dir}.{Colors.NOCOLOR}")

def repakgamepach1(selected_file):
    """Repack the selected edited files."""
    pak_name = selected_file.stem  # Get the name of the .pak file without extension
    repack_dir = unpack_repack_dir / pak_name / "repack"
    result_dir = unpack_repack_dir / pak_name / "result"

    if not repack_dir.exists():
        print(f"{Colors.RED}No edited files found in {repack_dir}.{Colors.NOCOLOR}")
        return

    print(f"{Colors.CYAN}Repacking {selected_file.name} from {repack_dir}...{Colors.NOCOLOR}")
    subprocess.run([str(executable_script), "-a", "-r", str(selected_file), str(repack_dir)])
    
    # Move the repacked .pak file to the result directory (keeping the original name)
    repacked_file = selected_file.with_name(selected_file.name)
    shutil.copy(repacked_file, result_dir / repacked_file.name)  # Copy instead of moving
    print(f"{Colors.GREEN}Repacking completed! Modified .pak file is saved in {result_dir}.{Colors.NOCOLOR}")

def unpak_all_paks():
    """Unpack all .pak files in the PAKS directory."""
    pak_files = list(paks_dir.glob("*.pak"))
    if not pak_files:
        print(f"{Colors.RED}No .pak files found in {paks_dir}.{Colors.NOCOLOR}")
        return

    print(f"{Colors.CYAN}Unpacking all .pak files in {paks_dir}...{Colors.NOCOLOR}")
    for selected_file in pak_files:
        unpakgamepach1(selected_file)
    print(f"{Colors.GREEN}All .pak files have been unpacked!{Colors.NOCOLOR}")

def unpakgamepach():
    """Prompt user to select a .pak file to unpack."""
    pak_files = list(paks_dir.glob("*.pak"))
    if not pak_files:
        print(f"{Colors.RED}No .pak files found in {paks_dir}.{Colors.NOCOLOR}")
        return

    print(f"{Colors.CYAN}Available .pak files:{Colors.BLUE}")
    for i, file in enumerate(pak_files):
        print(f"{i + 1}: {file.name}")

    try:
        choice = int(input(f"{Colors.YELLOW}Please select a file to unpack: {Colors.NOCOLOR}")) - 1
        if 0 <= choice < len(pak_files):
            selected_file = pak_files[choice]
            unpakgamepach1(selected_file)
        else:
            print(f"{Colors.RED}Invalid selection.{Colors.NOCOLOR}")
    except ValueError:
        print(f"{Colors.RED}Invalid input. Please enter a number.{Colors.NOCOLOR}")

def repakgamepach():
    """Prompt user to select a .pak file to repack."""
    pak_files = list(paks_dir.glob("*.pak"))
    if not pak_files:
        print(f"{Colors.RED}No .pak files found in {paks_dir}.{Colors.NOCOLOR}")
        return

    print(f"{Colors.CYAN}Available .pak files:{Colors.NOCOLOR}")
    for i, file in enumerate(pak_files):
        print(f"{i + 1}: {file.name}")

    try:
        choice = int(input(f"{Colors.YELLOW}Please select a file to repack: {Colors.NOCOLOR}")) - 1
        if 0 <= choice < len(pak_files):
            selected_file = pak_files[choice]
            repakgamepach1(selected_file)
        else:
            print(f"{Colors.RED}Invalid selection.{Colors.NOCOLOR}")
    except ValueError:
        print(f"{Colors.RED}Invalid input. Please enter a number.{Colors.NOCOLOR}")

def main():
    """Main loop to provide options to the user."""
    while True:
        print(f"{Colors.LIGHTGREEN}1] UNPAK")
        print("2] UNPAK ALL")
        print("3] REPAK")
        print("4] EXIT")
        choice = input(f"{Colors.YELLOW}PLEASE CHOOSE: {Colors.NOCOLOR}")

        if choice == "1":
            unpakgamepach()
        elif choice == "2":
            unpak_all_paks()
        elif choice == "3":
            repakgamepach()
        elif choice == "4":
            print(f"{Colors.GREEN}Exiting...{Colors.NOCOLOR}")
            break
        else:
            print(f"{Colors.RED}Invalid option. Try another one.{Colors.PURPLE}")

if __name__ == "__main__":
    main()